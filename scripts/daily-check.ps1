# –°–∫—Ä–∏–ø—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\daily-check.ps1

Write-Host "üîç –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ Focus App" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
$Date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
Write-Host "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: $Date" -ForegroundColor Yellow

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ package.json
Write-Host "`nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json..." -ForegroundColor Green
if (Test-Path "package.json") {
    Write-Host "‚úÖ package.json –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
    $PackageInfo = Get-Content "package.json" | ConvertFrom-Json
    Write-Host "   –í–µ—Ä—Å–∏—è: $($PackageInfo.version)" -ForegroundColor Gray
    Write-Host "   –ù–∞–∑–≤–∞–Ω–∏–µ: $($PackageInfo.name)" -ForegroundColor Gray
} else {
    Write-Host "‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    exit 1
}

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
Write-Host "`nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." -ForegroundColor Green
if (Test-Path "node_modules") {
    Write-Host "‚úÖ node_modules –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
    $NodeModulesSize = (Get-ChildItem "node_modules" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
    Write-Host "   –†–∞–∑–º–µ—Ä: $([math]::Round($NodeModulesSize, 2)) MB" -ForegroundColor Gray
} else {
    Write-Host "‚ö†Ô∏è  node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ npm install" -ForegroundColor Yellow
}

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
Write-Host "`nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..." -ForegroundColor Green
$RequiredFiles = @(
    "src/FocusMinimal.tsx",
    "src/components/TaskManager.tsx",
    "src/components/PWAStatus.tsx",
    "public/index.html",
    "CHANGELOG.md",
    "VERSION.md"
)

foreach ($File in $RequiredFiles) {
    if (Test-Path $File) {
        Write-Host "‚úÖ $File" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $File - –ù–ï –ù–ê–ô–î–ï–ù!" -ForegroundColor Red
    }
}

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ç–∫–∞–ø—ã
Write-Host "`nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤..." -ForegroundColor Green
if (Test-Path "..\backups") {
    $Backups = Get-ChildItem "..\backups" -Directory
    Write-Host "‚úÖ –ù–∞–π–¥–µ–Ω–æ –±—ç–∫–∞–ø–æ–≤: $($Backups.Count)" -ForegroundColor Green
    
    if ($Backups.Count -gt 0) {
        $LatestBackup = $Backups | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        $DaysSinceLastBackup = (Get-Date) - $LatestBackup.LastWriteTime
        Write-Host "   –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: $($LatestBackup.Name)" -ForegroundColor Gray
        Write-Host "   –°–æ–∑–¥–∞–Ω: $($DaysSinceLastBackup.Days) –¥–Ω–µ–π –Ω–∞–∑–∞–¥" -ForegroundColor Gray
        
        if ($DaysSinceLastBackup.Days -gt 7) {
            Write-Host "‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—ç–∫–∞–ø" -ForegroundColor Yellow
        }
    }
} else {
    Write-Host "‚ùå –ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!" -ForegroundColor Red
}

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞
Write-Host "`nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor Green
$ProjectSize = (Get-ChildItem "." -Recurse -Exclude "node_modules" | Measure-Object -Property Length -Sum).Sum / 1MB
Write-Host "   –†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: $([math]::Round($ProjectSize, 2)) MB" -ForegroundColor Gray

$FileCount = (Get-ChildItem "." -Recurse -File -Exclude "node_modules" | Measure-Object).Count
Write-Host "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: $FileCount" -ForegroundColor Gray

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
Write-Host "`nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è..." -ForegroundColor Green
$RecentFiles = Get-ChildItem "." -Recurse -File -Exclude "node_modules" | 
    Where-Object { $_.LastWriteTime -gt (Get-Date).AddDays(-1) } |
    Sort-Object LastWriteTime -Descending |
    Select-Object -First 5

if ($RecentFiles.Count -gt 0) {
    Write-Host "   –§–∞–π–ª—ã, –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:" -ForegroundColor Gray
    foreach ($File in $RecentFiles) {
        $RelativePath = $File.FullName.Replace((Get-Location).Path + "\", "")
        Write-Host "   - $RelativePath ($($File.LastWriteTime.ToString('HH:mm')))" -ForegroundColor Gray
    }
} else {
    Write-Host "   –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞" -ForegroundColor Gray
}

# 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
Write-Host "`nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" -ForegroundColor Cyan
$Recommendations = @()

if (-not (Test-Path "node_modules")) {
    $Recommendations += "–í—ã–ø–æ–ª–Ω–∏—Ç—å: npm install"
}

if ($Backups.Count -eq 0 -or $DaysSinceLastBackup.Days -gt 7) {
    $Recommendations += "–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: .\scripts\simple-backup.ps1 'daily-check'"
}

if ($Recommendations.Count -gt 0) {
    foreach ($Rec in $Recommendations) {
        Write-Host "   ‚Ä¢ $Rec" -ForegroundColor Yellow
    }
} else {
    Write-Host "   ‚úÖ –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ!" -ForegroundColor Green
}

Write-Host "`n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" -ForegroundColor Green


